# 编译环境
FROM ubuntu:20.04

# 避免交互式提示
ENV DEBIAN_FRONTEND=noninteractive

# 安装基础工具和编译器
RUN apt-get update && \
    apt-get install -y \
        wget \
        git \
        make \
        gcc \
        g++ \
        python3 \
        python3-pip \
        xz-utils \
        linux-headers-generic \
        zlib1g-dev \
        libelf-dev \
        libbpf-dev \
        libc6-dev \
        linux-libc-dev \
        gcc-multilib \
        curl \
        gnupg2 \
        lsb-release \
        software-properties-common && \
    # 添加 LLVM 官方源
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" && \
    apt-get update && \
    apt-get install -y \
        clang-14 \
        lldb-14 \
        lld-14 \
        clangd-14 \
        libclang-14-dev && \
    # 创建符号链接
    ln -s /usr/bin/clang-14 /usr/bin/clang && \
    ln -s /usr/bin/llvm-strip-14 /usr/bin/llvm-strip && \
    # 清理 apt 缓存
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 下载并安装 Go
RUN wget https://mirrors.aliyun.com/golang/go1.22.0.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz && \
    rm go1.22.0.linux-amd64.tar.gz

# 设置工作目录和输出目录
WORKDIR /workspace
ENV OUTPUT_DIR=/workspace/output
RUN mkdir -p ${OUTPUT_DIR}

# 设置 Go 环境变量
ENV GOROOT="/usr/local/go"
ENV PATH="${GOROOT}/bin:${PATH}"
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV GOAMD64=v1

# 设置 Go 工作目录
ENV GOPATH="/go"
ENV PATH="${GOPATH}/bin:${PATH}"

# 设置编译器和 BPF 环境变量
ENV CC=/usr/bin/clang \
    BPF_CLANG=/usr/bin/clang \
    BPF_CFLAGS="-O2 -g -target bpf -D__TARGET_ARCH_x86 -I/workspace/bpf -I/usr/include/x86_64-linux-gnu -I/usr/include -I/usr/include/linux -I/usr/include/bpf -I/usr/lib/llvm-14/lib/clang/14.0.6/include" \
    GOPROXY=https://goproxy.cn,direct

# 设置 BPF 头文件环境
RUN mkdir -p /usr/include/bpf && \
    # 确保系统头文件路径正确
    rm -f /usr/include/asm && \
    ln -sf /usr/include/x86_64-linux-gnu/asm /usr/include/asm && \
    # 准备 BPF 头文件目录
    rm -rf /usr/include/bpf/* && \
    # 复制系统 BPF 头文件到工作目录
    cp -f /usr/include/linux/bpf.h /usr/include/bpf/ && \
    cp -f /usr/include/linux/bpf_common.h /usr/include/bpf/ && \
    cp -f /usr/include/linux/types.h /usr/include/bpf/ && \
    # 安装 libbpf 开发包
    apt-get update && \
    apt-get install -y --no-install-recommends libbpf-dev && \
    # 创建必要的符号链接
    ln -sf /usr/include/bpf/libbpf.h /usr/include/bpf/bpf_helpers.h && \
    ln -sf /usr/include/bpf/libbpf.h /usr/include/bpf/bpf_helper_defs.h && \
    # 清理
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 设置默认的构建命令，确保输出到指定目录
CMD ["make", "build-in-docker", "OUTPUT_DIR=/workspace/output"]
