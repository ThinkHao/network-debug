FROM openanolis/anolisos:7.9-x86_64

# 配置基础源和EPEL源
RUN yum install -y wget && \
    wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-7.repo && \
    sed -i 's/$releasever/7/g' /etc/yum.repos.d/CentOS-Base.repo && \
    yum install -y epel-release && \
    wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo && \
    yum clean all && \
    yum makecache

# 配置SCL源
RUN yum install -y centos-release-scl && \
    yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    sed -i 's|mirror.centos.org|vault.centos.org|g' /etc/yum.repos.d/CentOS-SCLo-scl.repo /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo && \
    sed -i 's|#baseurl=http://vault|baseurl=http://vault|g' /etc/yum.repos.d/CentOS-SCLo-scl.repo /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo && \
    sed -i 's|mirrorlist=|#mirrorlist=|g' /etc/yum.repos.d/CentOS-SCLo-scl.repo /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo && \
    yum clean all && \
    yum makecache && \
    yum install -y scl-utils

# 安装必要的构建工具和依赖
RUN yum groupinstall -y "Development Tools" && \
    yum install -y \
    which \
    git \
    llvm-toolset-7 \
    llvm-toolset-7-llvm-devel \
    llvm-toolset-7-llvm-static \
    devtoolset-7-llvm \
    make \
    gcc \
    glibc-devel \
    kernel-devel \
    elfutils-libelf-devel \
    pkg-config \
    && yum clean all

# 启用LLVM工具集
SHELL [ "/bin/bash", "-c" ]
RUN source /opt/rh/llvm-toolset-7/enable && \
    source /opt/rh/devtoolset-7/enable && \
    echo "source /opt/rh/llvm-toolset-7/enable" >> /etc/bashrc && \
    echo "source /opt/rh/devtoolset-7/enable" >> /etc/bashrc && \
    ln -sf /opt/rh/llvm-toolset-7/root/usr/bin/llvm-strip /usr/bin/llvm-strip && \
    ln -sf /opt/rh/llvm-toolset-7/root/usr/bin/clang /usr/bin/clang

# 安装 Go
RUN wget https://mirrors.aliyun.com/golang/go1.22.0.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz && \
    rm go1.22.0.linux-amd64.tar.gz

# 设置环境变量
ENV PATH="/opt/rh/llvm-toolset-7/root/usr/bin:/opt/rh/devtoolset-7/root/usr/bin:/usr/bin:/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV PATH="${GOPATH}/bin:${PATH}"

# 设置工作目录
WORKDIR /workspace

# 设置 Go 编译环境变量
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV GOAMD64=v1

# 创建必要的符号链接
RUN ln -sf /usr/include/asm-generic /usr/include/asm

# 设置 BPF 相关环境变量
ENV BPF_CLANG=clang
ENV BPF_CFLAGS="-O2 -g -target bpf -D__TARGET_ARCH_x86 -I/usr/include -I/usr/include/asm -I/usr/include/clang-include -I/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include"

CMD ["make", "build-in-docker"]
