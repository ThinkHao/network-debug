# 编译环境
FROM openanolis/anolisos:7.9-x86_64

# 安装基础工具和编译器
RUN yum update -y && \
    yum install -y yum-utils epel-release && \
    yum install -y \
        gcc \
        gcc-c++ \
        wget \
        git \
        make \
        ninja-build \
        cmake3 \
        python3 \
        python3-pip \
        zlib-devel \
        libffi-devel \
        ncurses-devel \
        xz-devel \
        kernel-devel \
        elfutils-libelf-devel \
        glibc-devel

# 编译安装 LLVM/Clang
ENV LLVM_VERSION=14.0.6
RUN cd /tmp && \
    wget https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/llvm-project-${LLVM_VERSION}.src.tar.xz && \
    tar xf llvm-project-${LLVM_VERSION}.src.tar.xz && \
    mkdir -p llvm-project-${LLVM_VERSION}.src/build && \
    cd llvm-project-${LLVM_VERSION}.src/build && \
    cmake3 -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DLLVM_ENABLE_PROJECTS="clang;lld" \
        -DLLVM_TARGETS_TO_BUILD="BPF;X86" \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_ENABLE_TERMINFO=OFF \
        -DLLVM_ENABLE_ASSERTIONS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DCMAKE_INSTALL_PREFIX=/usr/local/llvm \
        ../llvm && \
    ninja -j$(nproc) && \
    ninja install && \
    cd / && \
    rm -rf /tmp/llvm-project-${LLVM_VERSION}.src*

# 创建必要的符号链接
RUN ln -sf /usr/local/llvm/bin/clang /usr/bin/clang && \
    ln -sf /usr/local/llvm/bin/llvm-strip /usr/bin/llvm-strip && \
    ln -sf /usr/local/llvm/bin/clang /usr/bin/clang-14 && \
    ln -sf /usr/local/llvm/bin/llvm-strip /usr/bin/llvm-strip-14 && \
    echo "/usr/local/llvm/lib" > /etc/ld.so.conf.d/llvm.conf && \
    ldconfig

# 下载并安装 Go
RUN wget https://mirrors.aliyun.com/golang/go1.22.0.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz && \
    rm go1.22.0.linux-amd64.tar.gz

# 设置工作目录和输出目录
WORKDIR /workspace
ENV OUTPUT_DIR=/workspace/output
RUN mkdir -p ${OUTPUT_DIR}

# 设置 Go 环境变量
ENV GOROOT="/usr/local/go"
ENV PATH="${GOROOT}/bin:${PATH}"
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV GOAMD64=v1

# 设置 Go 工作目录
ENV GOPATH="/go"
ENV PATH="${GOPATH}/bin:${PATH}"

# 设置编译器和 BPF 环境变量
ENV PATH="/usr/local/llvm/bin:${PATH}" \
    CC=/usr/bin/clang \
    BPF_CLANG=/usr/bin/clang \
    BPF_CFLAGS="-O2 -g -target bpf -D__TARGET_ARCH_x86 -I/usr/include/bpf -I/usr/include -I/usr/include/asm -I/usr/include/clang/14/include" \
    GOPROXY=https://goproxy.cn,direct

# 安装 bpf 相关头文件
RUN mkdir -p /usr/include/bpf && \
    cp -r /usr/include/linux /usr/include/bpf/ && \
    cp -r /usr/include/asm /usr/include/bpf/ && \
    cp -r /usr/include/asm-generic /usr/include/bpf/

# 设置默认的构建命令，确保输出到指定目录
CMD ["make", "build-in-docker", "OUTPUT_DIR=/workspace/output"]
